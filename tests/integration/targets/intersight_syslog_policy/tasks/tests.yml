---
- block:
  - name: Define anchor for Intersight API login info
    ansible.builtin.set_fact:
      api_info: &api_info
        api_private_key: "{{ api_private_key }}"
        api_key_id: "{{ api_key_id }}"
        api_uri: "{{ api_uri | default(omit) }}"
        validate_certs: "{{ validate_certs | default(omit) }}"
        organization: "{{ organization }}"

  - name: Make sure the environment is clean before starting
    cisco.intersight.intersight_syslog_policy:
      <<: *api_info
      name: "{{ item }}"
      state: absent
    loop:
      - test_syslog_policy
      - test_syslog_policy_2
      - test_syslog_policy_dual_remote

  - name: Create syslog policy with local logging only (check mode)
    cisco.intersight.intersight_syslog_policy:
      <<: *api_info
      name: "test_syslog_policy"
      description: "Local logging at notice level"
      tags:
        - Key: "service"
          Value: "testing"
      local_logging_minimum_severity: "notice"
    check_mode: true
    register: creation_res_check_mode

  - name: Verify policy was not created (check mode)
    ansible.builtin.assert:
      that:
        - creation_res_check_mode is changed
        - creation_res_check_mode.api_response == {}

  - name: Create syslog policy with local logging only
    cisco.intersight.intersight_syslog_policy:
      <<: *api_info
      name: "test_syslog_policy"
      description: "Local logging at notice level"
      tags:
        - Key: "service"
          Value: "testing"
      local_logging_minimum_severity: "notice"
    register: creation_res

  - name: Fetch info after creation
    cisco.intersight.intersight_syslog_policy_info:
      <<: *api_info
      name: "test_syslog_policy"
    register: creation_info_res

  - name: Verify policy creation by info
    ansible.builtin.assert:
      that:
        - creation_res.changed
        - creation_info_res.api_response[0].Name == 'test_syslog_policy'
        - creation_info_res.api_response[0].LocalClients[0].MinSeverity == 'notice'

  - name: Verify creation response aligns with info response
    ansible.builtin.assert:
      that:
        - creation_res.api_response.Name == creation_info_res.api_response[0].Name
        - creation_res.api_response.LocalClients[0].MinSeverity == creation_info_res.api_response[0].LocalClients[0].MinSeverity

  - name: Create syslog policy again to check for idempotency
    cisco.intersight.intersight_syslog_policy:
      <<: *api_info
      name: "test_syslog_policy"
      description: "Local logging at notice level"
      tags:
        - Key: "service"
          Value: "testing"
      local_logging_minimum_severity: "notice"
    register: creation_res_idem

  - name: Verify policy creation (idempotency check)
    ansible.builtin.assert:
      that:
        - not creation_res_idem.changed

  - name: Modify policy to enable the first remote logger
    cisco.intersight.intersight_syslog_policy:
      <<: *api_info
      name: "test_syslog_policy"
      first_remote_logging_enabled: true
      first_remote_logging_hostname: "10.10.20.20"
      first_remote_logging_protocol: "tcp"
      first_remote_logging_minimum_severity: "critical"
    register: changed_res

  - name: Fetch info after enabling first remote logger
    cisco.intersight.intersight_syslog_policy_info:
      <<: *api_info
      name: "test_syslog_policy"
    register: change_info_res

  - name: Verify policy change by info
    ansible.builtin.assert:
      that:
        - changed_res.changed
        - change_info_res.api_response[0].RemoteClients[0].Enabled
        - change_info_res.api_response[0].RemoteClients[0].Hostname == '10.10.20.20'
        - change_info_res.api_response[0].RemoteClients[0].Protocol == 'tcp'
        - change_info_res.api_response[0].RemoteClients[0].MinSeverity == 'critical'

  - name: Create a second syslog policy
    cisco.intersight.intersight_syslog_policy:
      <<: *api_info
      name: "test_syslog_policy_2"
      description: "A second policy for testing"
    register: creation_res_b

  - name: Fetch all syslog policies under the selected organization
    cisco.intersight.intersight_syslog_policy_info:
      <<: *api_info
    register: creation_info_res_b

  - name: Check that there are at least two syslog policies
    ansible.builtin.assert:
      that:
        - creation_info_res_b.api_response | length > 1

  - name: Test for input validation failure with an invalid port number
    cisco.intersight.intersight_syslog_policy:
      <<: *api_info
      name: "test_syslog_policy"
      first_remote_logging_enabled: true
      first_remote_logging_hostname: "1.1.1.1"
      first_remote_logging_port: 99999
    register: invalid_port_res
    failed_when:
      - "'has to be between 0 and 65535' not in invalid_port_res.msg"

  - name: Test for missing hostname when first remote logging is enabled
    cisco.intersight.intersight_syslog_policy:
      <<: *api_info
      name: "test_syslog_policy_missing_hostname"
      first_remote_logging_enabled: true
    register: missing_hostname_res
    failed_when:
      - missing_hostname_res is not failed
      - "'missing required arguments' not in missing_hostname_res.msg"

  - name: Create syslog policy with both first and second remote logging enabled
    cisco.intersight.intersight_syslog_policy:
      <<: *api_info
      name: "test_syslog_policy_dual_remote"
      description: "Policy with both remote loggers enabled"
      tags:
        - Key: "test"
          Value: "dual_remote"
      local_logging_minimum_severity: "error"
      first_remote_logging_enabled: true
      first_remote_logging_hostname: "10.10.30.30"
      first_remote_logging_port: 514
      first_remote_logging_protocol: "udp"
      first_remote_logging_minimum_severity: "warning"
      second_remote_logging_enabled: true
      second_remote_logging_hostname: "10.10.40.40"
      second_remote_logging_port: 1514
      second_remote_logging_protocol: "tcp"
      second_remote_logging_minimum_severity: "informational"
    register: dual_remote_res

  - name: Fetch info after creating policy with dual remote logging
    cisco.intersight.intersight_syslog_policy_info:
      <<: *api_info
      name: "test_syslog_policy_dual_remote"
    register: dual_remote_info_res

  - name: Verify policy with dual remote logging configuration
    ansible.builtin.assert:
      that:
        - dual_remote_res.changed
        - dual_remote_info_res.api_response[0].Name == 'test_syslog_policy_dual_remote'
        - dual_remote_info_res.api_response[0].LocalClients[0].MinSeverity == 'error'
        # First remote client validation
        - dual_remote_info_res.api_response[0].RemoteClients[0].Enabled
        - dual_remote_info_res.api_response[0].RemoteClients[0].Hostname == '10.10.30.30'
        - dual_remote_info_res.api_response[0].RemoteClients[0].Port == 514
        - dual_remote_info_res.api_response[0].RemoteClients[0].Protocol == 'udp'
        - dual_remote_info_res.api_response[0].RemoteClients[0].MinSeverity == 'warning'
        # Second remote client validation
        - dual_remote_info_res.api_response[0].RemoteClients[1].Enabled
        - dual_remote_info_res.api_response[0].RemoteClients[1].Hostname == '10.10.40.40'
        - dual_remote_info_res.api_response[0].RemoteClients[1].Port == 1514
        - dual_remote_info_res.api_response[0].RemoteClients[1].Protocol == 'tcp'
        - dual_remote_info_res.api_response[0].RemoteClients[1].MinSeverity == 'informational'

  - name: Modify dual remote policy to disable second remote logging
    cisco.intersight.intersight_syslog_policy:
      <<: *api_info
      name: "test_syslog_policy_dual_remote"
      first_remote_logging_enabled: true
      first_remote_logging_hostname: "10.10.30.30"
      second_remote_logging_enabled: false
    register: disable_second_remote_res

  - name: Fetch info after disabling second remote logging
    cisco.intersight.intersight_syslog_policy_info:
      <<: *api_info
      name: "test_syslog_policy_dual_remote"
    register: disable_second_remote_info_res

  - name: Verify second remote logging is disabled
    ansible.builtin.assert:
      that:
        - disable_second_remote_res.changed
        - disable_second_remote_info_res.api_response[0].RemoteClients[0].Enabled
        - not disable_second_remote_info_res.api_response[0].RemoteClients[1].Enabled

  always:
    - name: Cleanup - Remove syslog policies
      cisco.intersight.intersight_syslog_policy:
        <<: *api_info
        name: "{{ item }}"
        state: absent
      loop:
        - test_syslog_policy
        - test_syslog_policy_2
        - test_syslog_policy_dual_remote
