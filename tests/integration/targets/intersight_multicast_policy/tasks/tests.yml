---
- block:
  - name: Define anchor for Intersight API login info
    ansible.builtin.set_fact:
      api_info: &api_info
        api_private_key: "{{ api_private_key }}"
        api_key_id: "{{ api_key_id }}"
        api_uri: "{{ api_uri | default(omit) }}"
        validate_certs: "{{ validate_certs | default(omit) }}"
        organization: "{{ organization }}"

  - name: Make sure Env is clean
    cisco.intersight.intersight_multicast_policy:
      <<: *api_info
      name: "{{ item }}"
      state: absent
    loop:
      - test_multicast_policy
      - test_multicast_policy_2
      - test_multicast_policy_3

  - name: Create multicast policy - check-mode
    cisco.intersight.intersight_multicast_policy:
      <<: *api_info
      name: test_multicast_policy
      description: "Test multicast policy description"
      tags:
        - Key: Site
          Value: Test
        - Key: Site2
          Value: Test2
      querier_state: "Enabled"
      snooping_state: "Enabled"
      querier_ip_address: "192.168.1.1"
      querier_ip_address_peer: "192.168.1.2"
      src_ip_proxy: "Enabled"
    check_mode: true
    register: creation_res_check_mode

  - name: Verify multicast policy was not created - check-mode
    ansible.builtin.assert:
      that:
        - creation_res_check_mode is changed
        - creation_res_check_mode.api_response == {}

  - name: Create multicast policy
    cisco.intersight.intersight_multicast_policy:
      <<: *api_info
      name: test_multicast_policy
      description: "Test multicast policy description"
      tags:
        - Key: Site
          Value: Test
        - Key: Site2
          Value: Test2
      querier_state: "Enabled"
      snooping_state: "Enabled"
      querier_ip_address: "192.168.1.1"
      querier_ip_address_peer: "192.168.1.2"
      src_ip_proxy: "Enabled"
    register: creation_res

  - name: Fetch info after creation
    cisco.intersight.intersight_multicast_policy_info:
      <<: *api_info
      name: test_multicast_policy
    register: creation_info_res

  - name: Verify multicast policy creation by info
    ansible.builtin.assert:
      that:
        - creation_res.changed
        - creation_info_res.api_response[0].Name == 'test_multicast_policy'
        - creation_info_res.api_response[0].QuerierState == 'Enabled'
        - creation_info_res.api_response[0].SnoopingState == 'Enabled'
        - creation_info_res.api_response[0].QuerierIpAddress == '192.168.1.1'
        - creation_info_res.api_response[0].QuerierIpAddressPeer == '192.168.1.2'
        - creation_info_res.api_response[0].SrcIpProxy == 'Enabled'

  - name: Verify multicast policy creation response aligns with info response
    ansible.builtin.assert:
      that:
        - creation_res.api_response.Name == creation_info_res.api_response[0].Name
        - creation_res.api_response.QuerierState == creation_info_res.api_response[0].QuerierState
        - creation_res.api_response.SnoopingState == creation_info_res.api_response[0].SnoopingState

  - name: Create multicast policy (idempotency check)
    cisco.intersight.intersight_multicast_policy:
      <<: *api_info
      name: test_multicast_policy
      description: "Test multicast policy description"
      tags:
        - Key: Site
          Value: Test
        - Key: Site2
          Value: Test2
      querier_state: "Enabled"
      snooping_state: "Enabled"
      querier_ip_address: "192.168.1.1"
      querier_ip_address_peer: "192.168.1.2"
      src_ip_proxy: "Enabled"
    register: creation_res_ide

  - name: Verify multicast policy creation (idempotency check)
    ansible.builtin.assert:
      that:
        - not creation_res_ide.changed

  - name: Change settings on existing multicast policy
    cisco.intersight.intersight_multicast_policy:
      <<: *api_info
      name: test_multicast_policy
      querier_state: "Disabled"
      snooping_state: "Enabled"
      src_ip_proxy: "Disabled"
    register: changed_res

  - name: Fetch info after change
    cisco.intersight.intersight_multicast_policy_info:
      <<: *api_info
      name: test_multicast_policy
    register: change_info_res

  - name: Verify multicast policy change by info
    ansible.builtin.assert:
      that:
        - changed_res.changed
        - change_info_res.api_response[0].Name == 'test_multicast_policy'
        - change_info_res.api_response[0].QuerierState == 'Disabled'
        - change_info_res.api_response[0].SnoopingState == 'Enabled'
        - change_info_res.api_response[0].SrcIpProxy == 'Disabled'

  - name: Create another multicast policy with basic settings
    cisco.intersight.intersight_multicast_policy:
      <<: *api_info
      name: test_multicast_policy_2
      description: "Test basic multicast policy"
      querier_state: "Disabled"
      snooping_state: "Enabled"
      src_ip_proxy: "Enabled"
    register: creation_res_b

  - name: Verify second policy creation
    cisco.intersight.intersight_multicast_policy_info:
      <<: *api_info
      name: test_multicast_policy_2
    register: creation_info_res_b

  - name: Verify second policy has correct basic settings
    ansible.builtin.assert:
      that:
        - creation_info_res_b.api_response[0].QuerierState == 'Disabled'
        - creation_info_res_b.api_response[0].SnoopingState == 'Enabled'
        - creation_info_res_b.api_response[0].SrcIpProxy == 'Enabled'

  - name: Test validation rule - try to create invalid policy (Snooping Disabled + Querier Enabled)
    cisco.intersight.intersight_multicast_policy:
      <<: *api_info
      name: test_multicast_policy_3
      description: "This should fail validation"
      querier_state: "Enabled"
      snooping_state: "Disabled"
      querier_ip_address: "192.168.1.1"
      src_ip_proxy: "Enabled"
    register: validation_test_res
    ignore_errors: true

  - name: Verify that invalid configuration was rejected
    ansible.builtin.assert:
      that:
        - validation_test_res.failed
        - "'Invalid configuration' in validation_test_res.msg"
        - "'Snooping Disabled and Querier Enabled' in validation_test_res.msg"

  - name: Fetch all multicast policies under selected organization
    cisco.intersight.intersight_multicast_policy_info:
      <<: *api_info
    register: creation_info_res_final

  - name: Check that there are at least two multicast policies under this organization
    ansible.builtin.assert:
      that:
        - creation_info_res_final.api_response | length >= 2

  always:
  - name: Remove multicast policies
    cisco.intersight.intersight_multicast_policy:
      <<: *api_info
      name: "{{ item }}"
      state: absent
    loop:
      - test_multicast_policy
      - test_multicast_policy_2
      - test_multicast_policy_3
