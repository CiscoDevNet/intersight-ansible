---
- block:
  - name: Define anchor for Intersight API login info
    ansible.builtin.set_fact:
      api_info: &api_info
        api_private_key: "{{ api_private_key }}"
        api_key_id: "{{ api_key_id }}"
        api_uri: "{{ api_uri | default(omit) }}"
        validate_certs: "{{ validate_certs | default(omit) }}"
        organization: "{{ organization }}"

  - name: Make sure Env is clean
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: "{{ item }}"
      state: absent
    loop:
      - test_uuid_pool
      - test_uuid_pool_2

  - name: Create UUID pool - check-mode
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: test_uuid_pool
      description: UUID Pool for lab use
      prefix: "550E8400-E29B-41D4"
      uuid_suffix_blocks:
        - from: "A716-446655440000"
          size: 100
        - from: "A716-446655441000"
          size: 200
      tags:
        - Key: Site
          Value: RCDN
    check_mode: true
    register: creation_res_check_mode

  - name: Verify UUID pool was not created - check-mode
    ansible.builtin.assert:
      that:
        - creation_res_check_mode is changed
        - creation_res_check_mode.api_response == {}

  - name: Create UUID pool
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: test_uuid_pool
      description: UUID Pool for lab use
      prefix: "550E8400-E29B-41D4"
      uuid_suffix_blocks:
        - from: "A716-446655440000"
          size: 100
        - from: "A716-446655441000"
          size: 200
      tags:
        - Key: Site
          Value: RCDN
    register: creation_res

  - name: Fetch info for test_uuid_pool after creation
    cisco.intersight.intersight_uuid_pool_info:
      <<: *api_info
      name: test_uuid_pool
    register: creation_info_res

  - name: Verify UUID pool creation by info
    ansible.builtin.assert:
      that:
        - creation_res.changed
        - creation_info_res.api_response[0].Name == 'test_uuid_pool'
        - creation_info_res.api_response[0].UuidSuffixBlocks[0]["Size"] == 100
        - creation_info_res.api_response[0].UuidSuffixBlocks[0]["From"] == 'A716-446655440000'
        - creation_info_res.api_response[0].UuidSuffixBlocks[1]["Size"] == 200
        - creation_info_res.api_response[0].UuidSuffixBlocks[1]["From"] == 'A716-446655441000'
        - creation_info_res.api_response[0].Prefix == '550E8400-E29B-41D4'

  - name: Verify UUID pool creation response aligns with info response
    ansible.builtin.assert:
      that:
        - creation_res.api_response.Name == creation_info_res.api_response[0].Name
        - creation_res.api_response.UuidSuffixBlocks[0]["Size"] == creation_info_res.api_response[0].UuidSuffixBlocks[0]["Size"]
        - creation_res.api_response.UuidSuffixBlocks[0]["From"] == creation_info_res.api_response[0].UuidSuffixBlocks[0]["From"]
        - creation_res.api_response.UuidSuffixBlocks[1]["Size"] == creation_info_res.api_response[0].UuidSuffixBlocks[1]["Size"]
        - creation_res.api_response.UuidSuffixBlocks[1]["From"] == creation_info_res.api_response[0].UuidSuffixBlocks[1]["From"]
        - creation_res.api_response.Prefix == creation_info_res.api_response[0].Prefix

  - name: Create UUID pool (idempotency check)
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: test_uuid_pool
      description: UUID Pool for lab use
      prefix: "550E8400-E29B-41D4"
      uuid_suffix_blocks:
        - from: "A716-446655440000"
          size: 100
        - from: "A716-446655441000"
          size: 200
      tags:
        - Key: Site
          Value: RCDN
    register: creation_res_ide

  - name: Verify UUID pool creation (idempotency check)
    ansible.builtin.assert:
      that:
        - not creation_res_ide.changed

  - name: Validate failure due to missing uuid_suffix_blocks
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: test_uuid_pool_validate
      description: "Test UUID pool description"
      prefix: "550E8400-E29B-41D4"
      tags: [
        {
          "Key": "Site", "Value": "Test"
        },
        {
          "Key": "Site2", "Value": "Test3"
        }
      ]
      state: present
    register: failure_res
    failed_when: 
      - "'state is present but all of the following are missing: uuid_suffix_blocks' not in failure_res.msg"

  - name: Validate failure due to invalid UUID prefix format
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: test_uuid_pool_invalid_prefix
      description: "Test UUID pool with invalid prefix"
      prefix: "invalid-uuid-prefix"
      uuid_suffix_blocks:
        - from: "A716-446655440000"
          size: 100
      state: present
    register: failure_res_prefix
    failed_when: 
      - "'Invalid UUID prefix format' not in failure_res_prefix.msg"

  - name: Validate failure due to invalid UUID suffix format
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: test_uuid_pool_invalid_suffix
      description: "Test UUID pool with invalid suffix"
      prefix: "550E8400-E29B-41D4"
      uuid_suffix_blocks:
        - from: "invalid-suffix"
          size: 100
      state: present
    register: failure_res_suffix
    failed_when: 
      - "'Invalid UUID suffix format' not in failure_res_suffix.msg"

  - name: Create second UUID pool
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: test_uuid_pool_2
      description: Second UUID Pool for testing
      prefix: "12345678-1234-5678"
      uuid_suffix_blocks:
        - from: "9ABC-DEF123456789"
          size: 50
        - from: "FEDC-7654321098AB"
          size: 25
      tags:
        - Key: Environment
          Value: Test
    register: creation_res_2

  - name: Fetch info for test_uuid_pool_2 after creation
    cisco.intersight.intersight_uuid_pool_info:
      <<: *api_info
      name: test_uuid_pool_2
    register: creation_info_res_2

  - name: Verify second UUID pool creation
    ansible.builtin.assert:
      that:
        - creation_res_2.changed
        - creation_info_res_2.api_response[0].Name == 'test_uuid_pool_2'
        - creation_info_res_2.api_response[0].UuidSuffixBlocks[0]["Size"] == 50
        - creation_info_res_2.api_response[0].UuidSuffixBlocks[0]["From"] == '9ABC-DEF123456789'
        - creation_info_res_2.api_response[0].UuidSuffixBlocks[1]["Size"] == 25
        - creation_info_res_2.api_response[0].UuidSuffixBlocks[1]["From"] == 'FEDC-7654321098AB'
        - creation_info_res_2.api_response[0].Prefix == '12345678-1234-5678'

  - name: Fetch all UUID pools under organization
    cisco.intersight.intersight_uuid_pool_info:
      <<: *api_info
    register: creation_info_res_all

  - name: Check that there are at least 2 UUID pools under this organization
    ansible.builtin.assert:
      that:
        - creation_info_res_all.api_response | length >= 2

  - name: Update UUID pool description
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: test_uuid_pool
      description: Updated UUID Pool description
      prefix: "550E8400-E29B-41D4"
      uuid_suffix_blocks:
        - from: "A716-446655440000"
          size: 100
        - from: "A716-446655441000"
          size: 200
      tags:
        - Key: Site
          Value: RCDN
    register: update_res

  - name: Fetch info for test_uuid_pool after update
    cisco.intersight.intersight_uuid_pool_info:
      <<: *api_info
      name: test_uuid_pool
    register: update_info_res

  - name: Verify UUID pool update
    ansible.builtin.assert:
      that:
        - update_res.changed
        - update_info_res.api_response[0].Description == 'Updated UUID Pool description'

  - name: Test UUID pool deletion - check-mode
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: test_uuid_pool
      state: absent
    check_mode: true
    register: deletion_res_check_mode

  - name: Verify UUID pool deletion - check-mode
    ansible.builtin.assert:
      that:
        - deletion_res_check_mode is changed

  - name: Delete UUID pool
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: test_uuid_pool
      state: absent
    register: deletion_res

  - name: Verify UUID pool deletion
    ansible.builtin.assert:
      that:
        - deletion_res.changed

  - name: Delete UUID pool (idempotency check)
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: test_uuid_pool
      state: absent
    register: deletion_res_ide

  - name: Verify UUID pool deletion (idempotency check)
    ansible.builtin.assert:
      that:
        - not deletion_res_ide.changed

  always:
  - name: Remove test UUID pools
    cisco.intersight.intersight_uuid_pool:
      <<: *api_info
      name: "{{ item }}"
      state: absent
    loop:
      - test_uuid_pool
      - test_uuid_pool_2
