---
- block:
  - name: Define anchor for Intersight API login info
    ansible.builtin.set_fact:
      api_info: &api_info
        api_private_key: "{{ api_private_key }}"
        api_key_id: "{{ api_key_id }}"
        api_uri: "{{ api_uri | default(omit) }}"
        validate_certs: "{{ validate_certs | default(omit) }}"

  - name: Make sure Env is clean
    cisco.intersight.intersight_mac_pool:
      <<: *api_info
      name: test_mac_pool
      organization: "{{ organization }}"
      state: absent

  - name: Create mac pool - check-mode
    cisco.intersight.intersight_mac_pool:
      <<: *api_info
      name: test_mac_pool
      organization: "{{ organization }}"
      description: "Test mac pool description"
      tags: [
        {
          "Key": "Site", "Value": "Test"
        },
        {
          "Key": "Site2", "Value": "Test3"
        }
      ]
      mac_blocks: [
        {
          "address_from": "00:25:B5:00:00:00",
          "size": 20
        }
      ]
    check_mode: true
    register: creation_res_check_mode

  - name: Verify mac pool was not created - check-mode
    ansible.builtin.assert:
      that:
        - creation_res_check_mode is changed
        - creation_res_check_mode.api_response == {}

  - name: Create mac pool
    cisco.intersight.intersight_mac_pool:
      <<: *api_info
      name: test_mac_pool
      organization: "{{ organization }}"
      description: "Test mac pool description"
      tags: [
        {
          "Key": "Site", "Value": "Test"
        },
        {
          "Key": "Site2", "Value": "Test3"
        }
      ]
      mac_blocks: [
        {
          "address_from": "00:25:B5:00:00:00",
          "size": 20
        }
      ]
    register: creation_res

  - name: Fetch info after creation
    cisco.intersight.intersight_mac_pool_info:
      <<: *api_info
      name: test_mac_pool
      organization: "{{ organization }}"
    register: creation_info_res

  - name: Verify mac pool creation by info
    ansible.builtin.assert:
      that:
        - creation_res.changed
        - creation_info_res.api_response[0].Name == 'test_mac_pool'
        - creation_info_res.api_response[0].MacBlocks[0]["Size"] == 20
        - creation_info_res.api_response[0].MacBlocks[0]["From"] == '00:25:B5:00:00:00'

  - name: Verify mac pool creation response aligns with info response
    ansible.builtin.assert:
      that:
        - creation_res.api_response.Name == creation_info_res.api_response[0].Name
        - creation_res.api_response.MacBlocks[0]["Size"] == creation_info_res.api_response[0].MacBlocks[0]["Size"]
        - creation_res.api_response.MacBlocks[0]["From"] == creation_info_res.api_response[0].MacBlocks[0]["From"]

  - name: Create mac pool (idempotency check)
    cisco.intersight.intersight_mac_pool:
      <<: *api_info
      name: test_mac_pool
      organization: "{{ organization }}"
      description: "Test mac pool description"
      tags: [
        {
          "Key": "Site", "Value": "Test"
        },
        {
          "Key": "Site2", "Value": "Test3"
        }
      ]
      mac_blocks: [
        {
          "address_from": "00:25:B5:00:00:00",
          "size": 20
        }
      ]
    register: creation_res_ide

  - name: Verify mac pool creation (idempotency check)
    ansible.builtin.assert:
      that:
        - not creation_res_ide.changed

  - name: Validate failure due to missing mac_blocks
    cisco.intersight.intersight_mac_pool:
      <<: *api_info
      name: test_mac_pool_validate
      description: "Test mac pool description"
      tags: [
        {
          "Key": "Site", "Value": "Test"
        },
        {
          "Key": "Site2", "Value": "Test3"
        }
      ]
      state: present
    register: failure_res
    failed_when:
      - "'mac_blocks parameter must be provided and contain at least one block' not in failure_res.msg"

  - name: Create another mac pool
    cisco.intersight.intersight_mac_pool:
      <<: *api_info
      name: test_mac_pool_2
      organization: "{{ organization }}"
      description: "Test mac pool description"
      tags: [
        {
          "Key": "Site", "Value": "Test"
        },
        {
          "Key": "Site2", "Value": "Test3"
        }
      ]
      mac_blocks: [
        {
          "address_from": "00:25:B5:BB:00:00",
          "size": 20
        }
      ]
    register: creation_res_b

  - name: Fetch all mac pools under default organization
    cisco.intersight.intersight_mac_pool_info:
      <<: *api_info
      # organization: default
      organization: "{{ organization }}"
    register: creation_info_res_b

  - name: Check that there are at least 2 mac pools under this organization
    ansible.builtin.assert:
      that:
        - creation_info_res_b.api_response | length > 1

  always:
  - name: Remove mac pool
    cisco.intersight.intersight_mac_pool:
      <<: *api_info
      name: test_mac_pool
      organization: "{{ organization }}"
      state: absent

  - name: Remove mac pool 2
    cisco.intersight.intersight_mac_pool:
      <<: *api_info
      name: test_mac_pool_2
      organization: "{{ organization }}"
      state: absent
